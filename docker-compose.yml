services:
  postgres:
    image: postgres:16-alpine
    container_name: my_app_postgres
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d app"]
      interval: 10s
      timeout: 5s
      retries: 5

  backenddd:  # ← Changed from 'backend' to 'backenddd'
    image: php:8.3-fpm
    container_name: my_app_backend
    working_dir: /var/www
    volumes:
      - ./backenddd:/var/www  # ← Changed from './backend' to './backenddd'
      - ./backenddd/.env.docker:/var/www/.env  # ← Changed path
      - backend_vendor:/var/www/vendor  
    environment:
      - PHP_OPCACHE_VALIDATE_TIMESTAMPS=1 
      - PHP_OPCACHE_REVALIDATE_FREQ=0      
    command: > 
      sh -c "
        if [ ! -f /tmp/setup_done ]; then
          apt-get update && apt-get install -y git curl libpng-dev libonig-dev libxml2-dev libpq-dev libzip-dev zip unzip inotify-tools &&
          docker-php-ext-install pdo pdo_pgsql mbstring exif pcntl bcmath gd zip &&
          curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &&
          touch /tmp/setup_done;
        fi &&
        if [ ! -d vendor ] || [ ! -f vendor/autoload.php ]; then
          composer install --optimize-autoloader --no-interaction;
        fi &&
        mkdir -p config/jwt &&
        if [ ! -f config/jwt/private.pem ]; then
          openssl genpkey -out config/jwt/private.pem -algorithm rsa -pkeyopt rsa_keygen_bits:4096 &&
          openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout;
        fi &&
        chown -R www-data:www-data /var/www &&
        php-fpm -D &&
        echo 'Backend ready! Watching for file changes...' &&
        while inotifywait -r -e modify,create,delete /var/www/src /var/www/config 2>/dev/null; do
          echo 'Files changed, clearing Symfony cache...' &&
          php bin/console cache:clear --env=dev --no-warmup 2>/dev/null || true
        done
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "php-fpm -t"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: node:20-alpine
    container_name: my_app_frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules  
    command: sh -c "npm install && npm start"
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_API_URL=http://localhost:8081/api 
      - WATCHPACK_POLLING=true  
    depends_on:
      backenddd:  # ← Changed from 'backend' to 'backenddd'
        condition: service_healthy
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: my_app_nginx
    ports:
      - "8081:80"
    volumes:
      - ./backenddd:/var/www  # ← Changed from './backend' to './backenddd'
      - ./backenddd/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf  # ← Changed path
    depends_on:
      backenddd:  # ← Changed from 'backend' to 'backenddd'
        condition: service_healthy
      frontend:  
        condition: service_started
    networks:
      - app_network

volumes:
  postgres_data:
  backend_vendor:      
  frontend_node_modules:  

networks:
  app_network:
    driver: bridge